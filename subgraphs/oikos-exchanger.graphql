
type ExchangeEntrySettled @entity {
  id: ID!
  from: Bytes!
  src: Bytes!
  amount: BigInt!
  dest: Bytes!
  reclaim: BigInt!
  rebate: BigInt!
  srcRoundIdAtPeriodEnd: BigInt!
  destRoundIdAtPeriodEnd: BigInt!
  exchangeTimestamp: BigInt!
}

type ExchangeEntryAppended @entity {
  id: ID! # the transaction hash plus event log
  account: Bytes!
  src: Bytes!
  amount: BigInt!
  dest: Bytes!
  amountReceived: BigInt!
  exchangeFeeRate: BigInt!
  roundIdForSrc: BigInt!
  roundIdForDest: BigInt!
}


# Temporarily add rates entities until the Graph adds composability between subgraphs
# RatesUpdated tracks this event from the ExchangeRates.sol contract
type RatesUpdated @entity {
  id: ID!
  from: Bytes! # address
  currencyKeys: [Bytes!]! # bytes4[]
  newRates: [BigInt!]! # uint256[]
  gasPrice: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

# An individual RateUpdate - split out of RatesUpdated event
type RateUpdate @entity {
  id: ID!
  currencyKey: Bytes!
  synth: String!
  rate: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

# A chainlink Answer
type AggregatorAnswer @entity {
  id: ID!
  currencyKey: Bytes!
  synth: String!
  rate: BigInt!
  aggregator: Bytes! # address
  block: BigInt!
  timestamp: BigInt!
}


# The average price of OKS over a 15 minute period
type FifteenMinuteOKSPrice @entity {
  id: ID!
  count: BigInt!
  averagePrice: BigInt!
}

# The average price of OKS over a day
type DailyOKSPrice @entity {
  id: ID!
  count: BigInt!
  averagePrice: BigInt!
}

type LatestRate @entity {
  " Name of synth. E.g. sUSD "
  id: ID!

  " Synth USD rate with 18 decimals "
  rate: BigInt!
}